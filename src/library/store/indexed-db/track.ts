import { Track } from 'app/src-core/library';
import { ListOptions, TrackStore } from 'app/src-core/library/store/track';
import { compact, flatMap, omit } from 'lodash';
import { LibraryDatabase } from './db';
import { Identifier } from 'app/src-core/library/track';

export class IndexedDbTrackStore implements TrackStore {
  constructor(protected db: LibraryDatabase) {}

  async add(tracks: Track<any>[]): Promise<void> {
    const insertedTracks = await this.addTracks(tracks);
    await this.addIdentifiersFrom(insertedTracks);
  }

  async findByIdentifiers(identifiers: Identifier[]): Promise<Track<any>[]> {
    const trackIdentifiers = await this.db.identifiers
      .where('[name+value]')
      .anyOf(identifiers.map((id) => [id.name, id.value]))
      .toArray();
    const trackIds = compact(trackIdentifiers).map((id) => id?.trackId);
    const tracks = await this.db.tracks.bulkGet(trackIds);
    return compact(tracks);
  }

  async list(options: ListOptions): Promise<Track[]> {
    return this.db.tracks.offset(options.offset).limit(options.limit).toArray();
  }

  private async addTracks(tracks: Track[]): Promise<Track[]> {
    // ignore any provided ids so that it can be auto generated by IndexedDb
    const tracksToInsert = tracks.map((track) => omit(track, 'id'));
    const trackIds = await this.db.bulkAddTracks(tracksToInsert);
    return tracks.map((track, i) => ({ ...track, id: trackIds[i] }));
  }

  private async addIdentifiersFrom(tracks: Track<any>[]): Promise<void> {
    const identifiersToInsert = flatMap(tracks, (track) =>
      track.identifiers.map((identifier) => ({
        trackId: track.id,
        ...identifier,
      })),
    );

    await this.db.bulkAddIdentifiers(identifiersToInsert);
  }
}
