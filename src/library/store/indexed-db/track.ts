import { Track } from 'app/src-core/library';
import { TrackStore } from 'app/src-core/library/store/track';
import { flatMap, omit } from 'lodash';
import { LibraryDatabase } from './db';

export class IndexedDbTrackStore implements TrackStore {
  constructor(protected db: LibraryDatabase) {}

  async add(tracks: Track<any>[]): Promise<void> {
    const insertedTracks = await this.addTracks(tracks);
    await this.addIdentifiersFrom(insertedTracks);
  }

  private async addTracks(tracks: Track[]): Promise<Track[]> {
    // ignore any provided ids so that it can be auto generated by IndexedDb
    const tracksToInsert = tracks.map((track) => omit(track, 'id'));
    const trackIds = await this.db.bulkAddTracks(tracksToInsert);
    return tracks.map((track, i) => ({ ...track, id: trackIds[i] }));
  }

  private async addIdentifiersFrom(tracks: Track<any>[]): Promise<void> {
    const identifiersToInsert = flatMap(tracks, (track) =>
      track.identifiers.map((identifier) => ({
        trackId: track.id,
        ...identifier,
      })),
    );

    await this.db.bulkAddIdentifiers(identifiersToInsert);
  }
}
